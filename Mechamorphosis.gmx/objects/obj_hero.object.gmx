<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero_hitbox</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Music
audio_stop_sound(global.introSong);
global.levelMusic = audio_play_sound(snd_song2_intro,5,false);
audio_sound_gain(global.levelMusic,global.musicVolume,1);
distLeft = (audio_sound_length(global.levelMusic)-1);
soundLoop = false;
soundLoopIsDone = false;

//States
lrState = "stand";
jumpState = "air";
boostState = "charged";

//Variables
hSpd = 0;
vSpd = 0;
dir = 0;

//Stats
//Ground Movement
maxHSpd = 8;
hAccel = 2;
ffGround = 1;
lastGroundX = x;
lastGroundY = y;

//Jump/Air-based
jumpSpeed = 20;
ffAir = 0.5;
grav = 0.9;
lowJumpGrav = 2.5;
gravDown = 1.35;
jumpBoostFrictMax = 20;
jumpBoostFrictTimer = 0;

ghostJumpMax = 4;
ghostJumpTimer = ghostJumpMax;
bufferJump = "false";

//Combat
hpMax = 5;
hp = hpMax;
damage = 0.5
invincible = false;
startX = 192-32;
startY = 704;
dead = false;

//Boost
hasBoost = "false";
boostDuration = 15;
rechargeTime = 30;
hBoostMult = 1.1;
boostSpeed = 15;
boostReset = "false";
windupMax = 0;
windupTimer = windupMax;

//Timers
boostTimer = boostDuration;
boostCooldownTimer = rechargeTime;

//Placeholder Controls
if (!file_exists("config.ini"))
{
    show_debug_message("ERROR READING CONFIG FILE, SWAPPING TO DEFAULT CONTROLS");
    global.key_jump = vk_space;
    global.key_attack = ord('J');
    global.key_boost = ord('K');
    global.key_up = ord('W');
    global.key_left = ord('A');
    global.key_down = ord('S');
    global.key_right = ord('D');
}

//Sprite
spriteObj = instance_create(x,y,obj_hero_sprite);
image_speed = 0.25;

//Respawn
respawning = "false";
respawnSpeed = 32;
respawnSide = "left";

//Room Movement
view_x = view_xview;
view_y = view_yview;
view_x1 = view_x;
view_y1 = view_y;
view_xspeed = 64;
view_yspeed = 32;

//Cutscene/Intro
intro = true;
hSpd = 10;
vSpd = 10;

//Dev hacks
if (debug_mode)
{
    instance_create(832,704,obj_boostPowerUp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincible = false;
spriteObj.image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug messages
show_debug_message("start X,Y " + string(startX)+ ", "+string(startY));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room + view stuff
roomMoving = "false";
shiftRoom = true;

if (y &lt; 960)
{
    if (x &lt; 5824) //intro long room
    {
        view_object[0] = self;
        shiftRoom = false;
        view_x = view_xview;
        view_y = view_yview;
        view_x1 = view_x;
        view_y1 = view_y;
    }
}
else
{
    if (y &gt; 1920) &amp;&amp; (y &lt; 2880) 
    {
        if (x &gt; 2496) &amp;&amp; (x &lt; 7488) //second long room
        {
            view_object[0] = self;
            shiftRoom = false;
            view_x = view_xview;
            view_y = view_yview;
            view_x1 = view_x;
            view_y1 = view_y;
        }
    }
    else
    {
        if (y &gt; 3840) &amp;&amp; (y &lt; 4800)
        {
            if (x &gt; -832)&amp;&amp;(x &lt; 7488)
            {
                shiftRoom = false;
                if (x &lt; 832)
                {
                    view_xview = x - view_wview/2
                }
                else
                {
                    view_object[0] = self;
                }
                view_x = view_xview;
                view_y = view_yview;
                view_x1 = view_x;
                view_y1 = view_y;
            }
        }
    }
}   

if (y &gt; 832) &amp;&amp; (y&lt;1920) 
{
    if ((x &gt; 6656)&amp;&amp;(x &lt; 8320)) //first pit room
    {
        view_object[0] = noone;
        shiftRoom = false;
    }
}
else
{
    if (y &gt; 2752) &amp;&amp; (y &lt; 3840)
    {
        if ((x &gt; 1664) &amp;&amp; (x &lt; 8320)) || ((x &gt; 9984) &amp;&amp; (x &lt; 13312)) //Second and fourth pit rooms
        {
            view_object[0] = noone;
            shiftRoom = false;
        }
    }
    else
    {
        if (y &gt; 4672) //3rd pit room
        {
            view_object[0] = noone;
            shiftRoom = false;
        }
    }
}

if (shiftRoom)
{
view_object[0] = noone;

view_x = view_wview*floor(view_x / view_wview);

if (x+sprite_width/2 &gt; view_x + view_wview) //Right
{
    view_x += view_wview;
}
if (x+sprite_width/2 &lt; view_x) //left
{
    view_x -= view_wview;
}
if (y+sprite_height/2 &gt; view_y + view_hview) //Down
{
    view_y += view_hview;
}
if (y+sprite_height/2 &lt; view_y+64) //Up
{
    view_y -= view_hview;
}

if (view_x1 &lt; view_x)
{
    view_x1 = min(view_x,view_x1 + view_xspeed);
}
if (view_x1 &gt; view_x)
{
    view_x1 = max(view_x,view_x1 - view_xspeed);
}
if (view_y1 &lt; view_y)
{
    view_y1 = min(view_y,view_y1 + view_yspeed);
}
if (view_y1 &gt; view_y)
{
    view_y1 = max(view_y,view_y1 - view_yspeed);
}

if (view_xview != view_x1)
{
    roomMoving = "true";
    show_debug_message("WE MOVIN!");
    view_xview = view_x1;
}
if (view_yview != view_y1)
{
    roomMoving = "true";
    show_debug_message("WE MOVIN!");
    view_yview = view_y1;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement, input, and collision

if(roomMoving == "true")
{
    spriteObj.image_speed = 0;
    exit;
}
else
{
    spriteObj.image_speed = image_speed;
}

//Dead
if (!dead)
{

//Respawn
if (respawning = "true")
{
    if (y &lt;= lastGroundY)
    {
        if (((respawnSide == "left")&amp;&amp;(x - (speed*dcos(direction) + speed) &lt;= lastGroundX)) || ((respawnSide == "right")&amp;&amp;(x + (speed*dcos(direction) + speed) &gt;= lastGroundX)))
        {
            respawning = "false";
            spriteObj.visible = true;
            speed = 0;
            vSpd = 0;
            hSpd = 0;
            x = lastGroundX;
        }
    }
    exit;
}

hbL = x;
hbR = x+sprite_width-1;
hbT = y;
hbB = y+sprite_height-1;

if collision_rectangle(hbL,hbB+1,hbR,hbB+1,obj_wall,false,false)
{
    onGround = "true";
    if (intro == true)
    {
        intro = false;
        makeObjDown(-64,0,obj_wall,13);
    }
}
else
{
    onGround = "false";
}

switch(boostState)
{
    case ("charged"):
    {
        if ((keyboard_check_pressed(global.key_boost))&amp;&amp;(hasBoost == "true"))
        {
            boostState = "windup";
            windupTimer = windupMax;
            hSpd = 0;
            vSpd = 0;
            audio_play_sound(snd_boost,5,false);
        }
        break;
    }
    case ("windup"):
    {
        if (windupTimer &lt;=0)
        {
            calculateDirection();
            if ((dir == 0) || (dir == 180))
            {
                boostTimer = round(boostDuration*hBoostMult);
            }
            boostState = "boosting";
            boostReset = "false"
        }
        else
        {
            windupTimer --;
        }
        break;
    }
    case ("boosting"):
    {
        if (collision_rectangle(hbL,hbT,hbR,hbB,obj_lantern,false,false))
        {
            boostReset = "true";
        }
        if (boostTimer &lt;= 0)
        {
            var inst = collision_rectangle(hbL,hbB+1,hbR,hbB+1,obj_wall,false,false)
            if (inst == noone)
            {
                jumpState = "air";
                boostState = "recharge";
            }
            else
            {
                jumpState = "ground";
                boostCooldownTimer = rechargeTime;
                boostState = "charged";
            }
            if (dir == 90)
            {
                vSpd = round((vSpd*2)/3);
            }
            boostTimer = boostDuration;
        }
        else
        {
            instance_create(x + (sprite_width/2),y + (sprite_height/2),obj_dashFadeout);
            
            show_debug_message(dir);
            vSpd = boostSpeed*dsin(dir);
            hSpd = boostSpeed*dcos(dir);
            show_debug_message("vSpd = "+string(vSpd));
            show_debug_message("hSpd = "+string(hSpd));
            boostTimer--;
        }
        break;
    }
    case ("recharge"):
    {
        //boostCooldownTimer--;
        if ((boostCooldownTimer&lt;0)||(boostReset = "true"))
        {
            boostCooldownTimer = rechargeTime;
            boostState = "charged";
        }
        break;
    }
}

if ((boostState == "recharge")||(boostState = "charged"))
{
    //Change LR State
    if ((keyboard_check(global.key_left))&amp;&amp;(!keyboard_check(global.key_right)))
    {
        lrState = "left";
        dir = 180;
    }
    else
    {
        if ((keyboard_check(global.key_right))&amp;&amp;(!keyboard_check(global.key_left)))
        {
            lrState = "right";
            dir = 0;

        }
        else
        {
            if ((!keyboard_check(global.key_right)) &amp;&amp; (!keyboard_check(global.key_left)))
            {
                lrState = "null";
            }
        }
    }
}

//JumpState
if  (((boostState == "recharge")||(boostState = "charged")) || ((onGround = "true")&amp;&amp;(boostState == "boosting")))
{
    switch(jumpState)
    {
        case("ground"):
        {
            inst2 = (collision_rectangle(hbL,hbB,hbR,hbB-vSpd + 1,obj_platform,false,false));
            if ((inst2 != noone) &amp;&amp; (vSpd &gt;0))
            {
                inst2 = noone;      
                if (boostState == "recharge")
                {
                    boostState = "charged";
                }
            }
            inst =  collision_rectangle(hbL,hbB+1,hbR,hbB+1,obj_wall,false,true)
            if ((inst == noone)&amp;&amp;(inst2 == noone)) //not on ground
            {
                if (ghostJumpTimer&lt;=0)
                {
                    jumpState = "air";
                    ghostJumpTimer = ghostJumpMax;
                    break;
                }
                else
                {
                    ghostJumpTimer--;
                }
            }
            else //on ground
            {
                if (inst != noone)
                {
                    y = (inst.y - sprite_height);
                }
                else
                {
                    y = (inst2.y - sprite_height);
                }
            }
            inst = collision_point(x+sprite_width/2,hbB+1,obj_wall,false,true)
            if (inst!= noone)
            {
                lastGroundX = inst.x;
                lastGroundY = inst.y - sprite_height;
            }
            if (keyboard_check_pressed(global.key_jump) || (bufferJump == "true"))
            {
                bufferJump = "false";
                jumpState = "air";
                vSpd = jumpSpeed;
                audio_play_sound(snd_jump,5,false);
                if (boostState == "boosting")
                {
                    boostState = "recharge";
                    jumpBoostFrictTimer = jumpBoostFrictMax;
                    show_debug_message("boostJump");
                }
            }
            break;
        }
    
        case("air"):
        {
        
            if (vSpd &lt;= 0) //falling
            {
                vSpd -= gravDown;
            }
            else
            {
                if ((vSpd &gt; 0) &amp;&amp; (!keyboard_check(global.key_jump)) &amp;&amp; (boostState != "recharge")) //going up, not holding jump, not after boosting
                {
                    vSpd -= lowJumpGrav;
                }
                else
                {
                    if (vSpd &gt; 0) //going up, holding jump
                    {
                        vSpd -= grav;
                    }
                }
            }
        
            if (keyboard_check_pressed(global.key_jump))&amp;&amp;(collision_rectangle(hbL,hbB,hbR,hbB - (3*vSpd),obj_wall,false,false))
            {
                bufferJump = "true";
            }
            var inst = collision_rectangle(hbL,hbB,hbR,hbB - vSpd,obj_wall,false,false)
            if (inst != noone)
            {
                vSpd = (hbB+1) - inst.y;
                jumpState = "ground";
                if (boostState == "recharge")
                {
                    boostState = "charged";
                }
            }
            break;
        }
    }
}

if (((boostState == "recharge")||(boostState = "charged"))&amp;&amp;(intro == false))
{
    //Apply movement
    if (jumpBoostFrictTimer &lt;= 0) //not jumpBoosting
    {
        //Friction
        if (onGround = "true")
        {
            if (hSpd &gt; 0)
            {
                hSpd = max(hSpd-ffGround,0);
            }
            else
            {
                if (hSpd &lt; 0)
                {
                    hSpd = min(hSpd+ffGround,0);
                }
            }
        }
        else
        {
            if (hSpd &gt; 0)
            {
                hSpd = max(hSpd-ffAir,0);
            }
            else
            {
                if (hSpd &lt; 0)
                {
                    hSpd = min(hSpd+ffAir,0);
                }
            }
        }
        
        switch(lrState)
        {
            case("left"):
            {
                hSpd = max(0-maxHSpd,hSpd-hAccel);
                break;
            }
    
            case("right"):
            {
                hSpd = min(hSpd+hAccel,maxHSpd);
                break;
            }
        }
    }
    else //jumpBoosting
    {
        jumpBoostFrictTimer --;
        switch(lrState)
        {
            case("left"):
            {
                if (hSpd &gt; 0)
                {
                    hSpd = max(0, hSpd - hAccel);
                }
                break;
            }
    
            case("right"):
            {
                if (hSpd &lt; 0)
                {
                    hSpd = min(0, hSpd + hAccel);
                }
                break;
            }
        }
        if (hSpd == 0)
        {
            jumpBoostFrictTimer = 0;
        }
    }
}


} 
else //if dead
{
    
}

round(x);
round(y);
round(hSpd);
round(vSpd);

//Horizontal Collision
//Left
var inst = collision_rectangle(hbL+hSpd,hbT,hbL,hbB,obj_wall,false,true);
if (inst!=noone)
{
    hSpd = (inst.x+inst.sprite_width)-x;
}
else
{
    //Right
    var inst = collision_rectangle(hbR,hbT,hbR+hSpd,hbB,obj_wall,false,true);
    if (inst!= noone)
    {
        hSpd = (inst.x - (sprite_width+x));
    }
}

//Vertical Collision
//Up
var inst = collision_rectangle(hbL,hbT,hbR,hbT-vSpd,obj_wall,false,false);
if (inst!=noone)
{
    vSpd = hbT - (inst.y+inst.sprite_height);
}
else //Down
{
    var inst = collision_rectangle(hbL,hbB,hbR,hbB-vSpd + 1,obj_wall,false,false);
    if (inst!=noone)
    {
        vSpd = (hbB+1) - inst.y;
    }
    else
    {
        var inst = collision_rectangle(hbL,hbB,hbR,hbB-vSpd + 1,obj_platform,false,false);
        if ((inst!=noone)&amp;&amp;(vSpd &lt;=0))
        {
            vSpd = (hbB+1) - inst.y;
            jumpState = "ground";
            if (boostState == "recharge")
            {
                boostState = "charged";
            }
        }
    }
}

x+=hSpd;
y-=vSpd;
spriteObj.x = x + (sprite_width/2);
spriteObj.y = y + (sprite_height/2);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack
if (keyboard_check_pressed(global.key_attack))
{
    if (!instance_exists(obj_hero_attack))
    {
        instance_create(x+sprite_width/2,y+sprite_height/2,obj_hero_attack);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound Looping
if (!soundLoop)
{
    distLeft = ((audio_sound_length(global.levelMusic)) - (audio_sound_get_track_position(global.levelMusic)));
    if (distLeft &lt;=  0.005)
    {
        audio_stop_sound(global.levelMusic);
        global.levelMusic = audio_play_sound(snd_song2_loop,5,true);
        audio_sound_gain(global.levelMusic,global.musicVolume,0);
        soundLoop = true;;
    }
    /*if (distLeft &lt;= 1)
    {
        audio_sound_gain(global.levelMusic,0,1);
        global.levelMusic = audio_play_sound(snd_song2_loop,5,false);
        audio_sound_gain(global.levelMusic,global.musicVolume,1);
        audio_sound_set_track_position(global.levelMusic, distLeft);
        soundLoop = true;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bottomlessPit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_towards_point(lastGroundX,lastGroundY,respawnSpeed);

if (respawning == "false")
{
    hp -= 0.5;
    audio_play_sound(snd_hit,5,false);
}
respawning = "true";
if (lastGroundX &lt; x)
{
    respawnSide = "left";
}
else
{
    respawnSide = "right";
}
checkHpHero();
obj_hero_sprite.visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.y &gt;= view_yview + view_hview - 64)
{
    vSpd = max(vSpd,15);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_mode)
{
    obj_hero.hp += 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
