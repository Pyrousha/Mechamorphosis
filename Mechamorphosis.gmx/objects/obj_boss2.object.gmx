<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss2_hitbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//States and timers
combatState = "reload";

attackTime = 180;
attackTimer = 60;
numAttacks = 0;
numAttacksTillStun = 3;
attackList = ds_list_create();
ds_list_add(attackList,"missiles","summon","laser");
missileNum = 3;

overheatTime = 180;
overheatTimer = overheatTime;

soundTimer = 20;

//Death (lower wall)
xWall = 11200;
i = 0;
wallLowerSpeed = 15;

//Combat
hpMax = 3;
hp = hpMax;
damage = 1;
dead = false;

//Sprite
image_speed = 0.125;
spriteObj = instance_create(x,y,obj_boss2_sprite);
spriteObj.image_speed = image_speed;
spriteObj.parentObj = self;

lootList = ds_list_create();
enemyList = ds_list_create();
ds_list_add(lootList,obj_boostPowerUp);
dropRate = -1;

//Healthbar
hbTopStart = 4*64;
hbWidth = 5*64;
hbHeight = 32;
outlineSize = 4;
textY = 3*64 + 32;
redColour = make_colour_rgb(151,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (i &lt; 4)
{
    inst1 = collision_point(xWall + 64*i, 2752, obj_wall, false, true);
    inst2 = collision_point(xWall + 64*i, 2816, obj_wall, false, true);
    inst3 = collision_point(xWall + 64*i, 2816 + 64, obj_wall, false, true);
    instance_destroy(inst1);
    instance_destroy(inst2);
    instance_destroy(inst3);
    i++;
    alarm[8] = wallLowerSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (h = 0; h &lt; ds_list_size(enemyList); h++)
{
    inst = ds_list_find_value(enemyList,h);
    if (instance_exists(inst))
    {
        if (instance_exists(inst.spriteObj))
        {
            instance_destroy(inst.spriteObj);
        }
        instance_destroy(inst);
    }
}
enemyList = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead == false)
{
    alarm[1] = 1;
    spriteObj.visible = true;
    hp = hpMax;
    
    combatState = "reload";

    attackTime = 180;
    attackTimer = 60;
    numAttacks = 0;
    numAttacksTillStun = 3;
    attackList = ds_list_create();
    ds_list_add(attackList,"missiles","summon","laser");
    missileNum = 3;

    overheatTime = 180;
    overheatTimer = overheatTime;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If not in view, exit (also sound timer)
if (soundTimer &lt;20)
{
    soundTimer++;
}

if (!isInView())
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State swapping
if (hp &lt;= 0)
{
    combatState = "stand";
}
else
{
switch(combatState)
{
    case ("stand"):
    {
        if (numAttacks &lt; numAttacksTillStun)
        {
            randomize()
            combatState = ds_list_find_value(attackList,floor(random(3)));
            attackTimer = attackTime;
            numAttacks++;
        }
        else
        {
            numAttacks = 0;
            combatState = "overheat";
        }
        break;
    }
    
    case ("missiles"):
    {
        xCent = x+sprite_width/2;
        yCent = y+sprite_height/2;
        missile1 = instance_create(xCent, yCent - 1, obj_missile);
        missile2 = instance_create(xCent-1, yCent - 1, obj_missile);
        missile3 = instance_create(xCent+1, yCent - 1, obj_missile);
        if (missileNum &gt;= 4)
        {
            missile4 = instance_create(xCent-2, yCent - 1, obj_missile);
        }
        if (missileNum &gt;=5)
        {
            missile5 = instance_create(xCent+2, yCent - 1, obj_missile);
        }
        combatState = "reload";
        break;
    }
    
    case ("summon"):
    {
        summon1 = instance_create(11264,2688,obj_enemy);
        summon2 = instance_create(10240,2688,obj_enemy);
        summon1.dropRate = -1;
        summon2.dropRate = -1;
        ds_list_add(enemyList, summon1, summon2);
        if (missileNum &gt;= 4.5)
        {
            summon3 = instance_create(x+32,yCent,obj_enemy);
            summon3.dropRate = -1;
            ds_list_add(enemyList, summon3);
        }
        combatState = "reload";
        break;
    }
    
    case ("laser"):
    {
        laser1 = instance_create(x,y,obj_laserParent);
        laser2 = instance_create(x,y,obj_laserParent);
        laser3 = instance_create(x,y,obj_laserParent);
        laser3.targX = view_xview + view_wview/2;
        laser3.targY = view_yview + view_hview/2;
        laser1.image_angle = laser2.image_angle + 90;
        if (laser3.image_angle == 90)
        {
            laser3.image_angle = 270;
        }
        combatState = "reload";
        break;
    }
    
    case ("reload"):
    {
        if (attackTimer &gt; 0)
        {
            attackTimer --;
        }
        else
        {
            combatState = "stand";
            attackTimer = attackTime;
        }
    }
    
    case ("overheat"):
    {
        if (overheatTimer &gt; 0)
        {
            overheatTimer --;
        }
        else
        {
            combatState = "stand";
            overheatTimer = overheatTime;
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hero_attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_list_find_index(other.enemiesHitList,id) &lt; 0) &amp;&amp; (dead == false)
{
    if (combatState == "overheat")
    {
        ds_list_add(other.enemiesHitList,id);
        eDamage(self, other.damage);
        if (hp &lt;= 0)
        {
            alarm[8] = wallLowerSpeed;
            alarm[1] = 1;
            spriteObj.visible = true;
            obj_hero.canMove = false;
        }
        attackTime -= 20;
        overheatTime -= 20;
        missileNum += 0.5;
        combatState = "stand";
        overheatTimer = overheatTime;
        audio_play_sound(snd_enemyDeath,5,false);
    }
    else
    {
        if (soundTimer &gt;= 20)
        {
            audio_play_sound(snd_clank,5,false);
            soundTimer = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Healthbar

if (!isInView()) || (dead)
{
    exit;
}

//Name
draw_set_halign(fa_center);
draw_set_valign(fa_middle)
draw_set_font(fnt_12x10);
draw_text_outlined(view_xview + view_wview/2,view_yview + textY,c_black,redColour,"THE TECHNOLOGICAL TERROR",4);


//outline
draw_set_colour(c_black);
hbLeft = view_xview + view_wview/2 - hbWidth;
hbRight = view_xview + view_wview/2 + hbWidth;
hbTop = view_yview + hbTopStart;
hbBottom = hbTop + hbHeight;
draw_rectangle(hbLeft,hbTop,hbRight,hbBottom,false);

//health
draw_set_colour(redColour);
healthWidth = (hbRight - outlineSize) - (hbLeft + outlineSize);
draw_rectangle(hbLeft + outlineSize,hbTop + outlineSize,hbLeft + outlineSize + (hp/hpMax)*(healthWidth),hbBottom - outlineSize,false);

draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
