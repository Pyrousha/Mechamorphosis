<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss1_hitbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//States
jumpState = "air";
boostState = "recharge";
combatState = "run";
doneBurning = false;

//Boost
boostDuration = 45;
boostTimer = boostDuration;
rechargeTime = 120;
rechargeTimer = rechargeTime;
boostSpeed = 20;
boostTeleFrames = 12;

//Variables
hSpd = 0;
vSpd = 0;
dir = 0;
startX = x;
startY = y;
maxHSpd = 4;

//Death (lower wall)
yWall = 3456;
i = 0;
wallLowerSpeed = 15;

//Stats
//Ground Movement
maxHSpd = 4;

//Jump/Air-based
jumpSpeed = 20;
ffAir = 0.5;
gravUp = 1;
gravDown = 1.35;
jumpBoostFrictMax = 20;
jumpBoostFrictTimer = 0;

//Combat
hpMax = 7;
hp = hpMax;
damage = 1;
dead = false;

//Sprite
image_speed = 0.125;
spriteObj = instance_create(x+sprite_width/2,y+sprite_width/2,obj_boss1_sprite);
spriteObj.image_speed = image_speed;
spriteObj.parentObj = self;

lootList = ds_list_create();
ds_list_add(lootList,obj_boostPowerUp);
dropRate = -1;

//Healthbar
hbTopStart = 4*64;
hbWidth = 5*64;
hbHeight = 32;
outlineSize = 4;
textY = 3*64 + 32;
redColour = make_colour_rgb(151,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (i &lt; 4)
{
    inst1 = collision_point(-32,yWall + 64*i,obj_wall,false,true);
    inst2 = collision_point(32,yWall + 64*i,obj_wall,false,true);
    instance_destroy(inst1);
    instance_destroy(inst2);
    i++;
    alarm[8] = wallLowerSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead == false)
{
    spriteObj.visible = true;
    x = startX;
    y = startY;
    hp = hpMax;
    
    //States
jumpState = "air";
boostState = "recharge";
combatState = "run";
doneBurning = false;

//Boost
boostDuration = 45;
boostTimer = boostDuration;
rechargeTime = 120;
rechargeTimer = rechargeTime;
boostSpeed = 20;
boostTeleFrames = 12;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If not in view, exit
if (!isInView())
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State swapping
if (hp &lt;= 0)
{
    boostState = "recharge";
    combatState = "stand";
    hSpd = 0;
    if (collision_line(hbL, hbB + 1, hbR, hbB + 1, obj_wall,false, true)) &amp;&amp; (doneBurning == false)
    {
        spriteObj.sprite_index = spr_boss1_burn;
        doneBurning = true;
    }
    vSpd -= gravDown;
}
else
{
switch(boostState)
{
    case ("charged"):
    {
        boostState = "boosting";
        combatState = "boosting";
        audio_play_sound(snd_boost,5,false);
        break;
    }
    case ("boosting"):
    {
        break;
    }
    case ("recharge"):
    {
        if (rechargeTimer &lt;= 0)
        {
            rechargeTimer = rechargeTime;
            boostState = "charged";
        }
        else
        {
            rechargeTimer--;
            if (rechargeTimer &lt; boostTeleFrames)
            {
                dir = 45*round(point_direction(x,y,obj_hero.x,obj_hero.y)/45);
                instance_create(spriteObj.x,spriteObj.y,obj_boost_boss);
                combatState = "stand";
                hSpd = 0;
            }
        }
    }
}

switch(combatState)
{
    case ("run"):
    {
        if (obj_hero.x &lt; x)
        {
            hSpd = 0-maxHSpd;
        }  
        else
        {
            hSpd = maxHSpd;
        }
        break;
    }
    case ("boosting"):
    {  
        if (boostTimer &lt;= 0)
        {
            combatState = "run";
            boostTimer = boostDuration; 
            boostState = "recharge";
        }
        else
        {
            vSpd = boostSpeed*dsin(dir);
            hSpd = boostSpeed*dcos(dir);
            instance_create(x + (sprite_width/2),y + (sprite_height/2),obj_bossDashFadeout);
            boostTimer --;
        }
        break;
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gravity and Collision

//Dead
if (!dead)
{
    hbL = x;
    hbR = x+sprite_width-1;
    hbT = y;
    hbB = y+sprite_height-1;

    if (collision_line(hbL, hbB + 1, hbR, hbB + 1, obj_wall,false, true))
    {
        jumpState = "ground";   
    }
    else
    {
        jumpState = "air";
    }

    //JumpState
    if (jumpState == "air")
    {
        if (vSpd &lt;= 0) //falling
        {
            vSpd -= gravDown;
        }
        else
        {
            vSpd -= gravUp; //Going up
        }
    }
} 
else //if dead
{
    
}
show_debug_message("enemy jumpState: "+string(jumpState));

round(x);
round(y);
round(hSpd);
round(vSpd);

//Horizontal Collision
//Left
var inst = collision_rectangle(hbL+hSpd,hbT,hbL,hbB,obj_wall,false,true);
if (inst!=noone)
{
    hSpd = (inst.x+inst.sprite_width)-x;
}
else
{
    //Right
    var inst = collision_rectangle(hbR,hbT,hbR+hSpd,hbB,obj_wall,false,true);
    if (inst!= noone)
    {
        hSpd = (inst.x - (sprite_width+x));
    }
}

//Vertical Collision
//Up
var inst = collision_rectangle(hbL,hbT,hbR,hbT-vSpd,obj_wall,false,false);
if (inst!=noone)
{
    vSpd = hbT - (inst.y+inst.sprite_height);
}
else //Down
{
    var inst = collision_rectangle(hbL,hbB,hbR,hbB-vSpd + 1,obj_wall,false,false);
    if (inst!=noone)
    {
        vSpd = (hbB+1) - inst.y;
    }
}

if (isInView())
{
    x+=hSpd;
    y-=vSpd;
    spriteObj.x = x + (sprite_width/2);
    spriteObj.y = y + (sprite_height/2);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hero_attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_list_find_index(other.enemiesHitList,id) &lt; 0) &amp;&amp; (dead == false)
{
    ds_list_add(other.enemiesHitList,id);
    eDamage(self, other.damage);
    if (hp &lt;= 0)
    {
        alarm[8] = wallLowerSpeed;
        spriteObj.visible = true;
        obj_hero.canMove = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hero">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!obj_hero.invincible) &amp;&amp; (dead == false)
{
    heroTakeDamage(damage);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Healthbar

if (!isInView()) || (dead)
{
    exit;
}

//Name
draw_set_halign(fa_center);
draw_set_valign(fa_middle)
draw_set_font(fnt_12x10);
draw_text_outlined(view_xview + view_wview/2,view_yview + textY,c_black,redColour,"THE COWARDLY SCIENTIST",4);


//outline
draw_set_colour(c_black);
hbLeft = view_xview + view_wview/2 - hbWidth;
hbRight = view_xview + view_wview/2 + hbWidth;
hbTop = view_yview + hbTopStart;
hbBottom = hbTop + hbHeight;
draw_rectangle(hbLeft,hbTop,hbRight,hbBottom,false);

//health
draw_set_colour(redColour);
healthWidth = (hbRight - outlineSize) - (hbLeft + outlineSize);
draw_rectangle(hbLeft + outlineSize,hbTop + outlineSize,hbLeft + outlineSize + (hp/hpMax)*(healthWidth),hbBottom - outlineSize,false);

draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
